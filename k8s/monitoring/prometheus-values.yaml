# Prometheus Stack Values
# This configures the complete monitoring stack

# Global configuration
fullnameOverride: "prometheus"

# Prometheus configuration
prometheus:
  # No external ingress - Prometheus is for internal use only
  # Access via kubectl port-forward if needed: kubectl port-forward -n monitoring svc/prometheus-prometheus 9090:9090
  # All monitoring data is accessible through Grafana dashboards
  
  prometheusSpec:
    storageSpec:
      volumeClaimTemplate:
        spec:
          storageClassName: "gp2"
          accessModes: ["ReadWriteOnce"]
          resources:
            requests:
              storage: 10Gi
    
    # Resource limits - Reduced for Free Tier
    resources:
      limits:
        cpu: 500m     # Reduced from 1000m
        memory: 1Gi   # Reduced from 2Gi
      requests:
        cpu: 250m     # Reduced from 500m
        memory: 512Mi # Reduced from 1Gi
    
    # Retention policy - Reduced for Free Tier
    retention: 7d      # Reduced from 30d
    retentionSize: 2GB # Reduced from 9GB
    
    # Service monitor selector
    serviceMonitorSelectorNilUsesHelmValues: false
    serviceMonitorSelector: {}
    
    # Rule selector
    ruleSelectorNilUsesHelmValues: false
    ruleSelector: {}
    
    # Additional scrape configs
    additionalScrapeConfigs:
      - job_name: 'kubernetes-pods'
        kubernetes_sd_configs:
          - role: pod
        relabel_configs:
          - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_scrape]
            action: keep
            regex: true
          - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_path]
            action: replace
            target_label: __metrics_path__
            regex: (.+)

# Grafana configuration
grafana:
  enabled: true

  # Admin credentials - uses GitHub secret for security
  # adminPassword: "admin123!" # Don't use hardcoded passwords in production
  adminPassword: ${GRAFANA_ADMIN_PASSWORD}

  # Minimal resources for Free Tier
  resources:
    limits:
      cpu: 200m      # Reduced from 500m
      memory: 256Mi  # Reduced from 1Gi
    requests:
      cpu: 100m      # Reduced from 250m
      memory: 128Mi  # Reduced from 512Mi

  # Smaller persistence
  persistence:
    enabled: true
    storageClassName: "gp2"
    size: 1Gi  # Keep small

  # Ingress configuration
  ingress:
    enabled: true
    ingressClassName: "nginx"
    annotations:
      nginx.ingress.kubernetes.io/ssl-redirect: "true"
      cert-manager.io/cluster-issuer: "letsencrypt-prod"
      nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
    hosts:
      - grafana.nainika.store
    tls:
      - secretName: grafana-nainika-store-tls
        hosts:
          - grafana.nainika.store
  
  # Dashboard providers
  dashboardProviders:
    dashboardproviders.yaml:
      apiVersion: 1
      providers:
      - name: 'default'
        orgId: 1
        folder: ''
        type: file
        disableDeletion: false
        editable: true
        options:
          path: /var/lib/grafana/dashboards/default
      - name: 'kubernetes'
        orgId: 1
        folder: 'Kubernetes'
        type: file
        disableDeletion: false
        editable: true
        options:
          path: /var/lib/grafana/dashboards/kubernetes
      - name: 'nginx'
        orgId: 1
        folder: 'NGINX'
        type: file
        disableDeletion: false
        editable: true
        options:
          path: /var/lib/grafana/dashboards/nginx
  
  # Pre-configured dashboards
  dashboards:
    kubernetes:
      # Kubernetes Cluster Monitoring
      k8s-cluster:
        gnetId: 7249
        revision: 1
        datasource: Prometheus
      
      # Kubernetes Pods Monitoring
      k8s-pods:
        gnetId: 6417
        revision: 1
        datasource: Prometheus
      
      # Node Exporter Full
      node-exporter:
        gnetId: 1860
        revision: 31
        datasource: Prometheus
    
    nginx:
      # NGINX Ingress Controller
      nginx-ingress:
        gnetId: 14314
        revision: 2
        datasource: Prometheus
    
    default:
      # Prometheus 2.0 Overview
      prometheus-overview:
        gnetId: 3662
        revision: 2
        datasource: Prometheus

# Alert Manager configuration
alertmanager:
  alertmanagerSpec:
    # No external ingress - AlertManager is for internal use only
    # Access via kubectl port-forward if needed: kubectl port-forward -n monitoring svc/prometheus-alertmanager 9093:9093
    
    storage:
      volumeClaimTemplate:
        spec:
          storageClassName: "gp2"
          accessModes: ["ReadWriteOnce"]
          resources:
            requests:
              storage: 2Gi
    
    resources:
      limits:
        cpu: 200m
        memory: 256Mi
      requests:
        cpu: 100m
        memory: 128Mi

# Node Exporter configuration
nodeExporter:
  enabled: true

# Kube State Metrics configuration
kubeStateMetrics:
  enabled: true

# Default rules and alerts
defaultRules:
  create: true
  rules:
    alertmanager: true
    etcd: true
    configReloaders: true
    general: true
    k8s: true
    kubeApiserverAvailability: true
    kubeApiserverBurnrate: true
    kubeApiserverHistogram: true
    kubeApiserverSlos: true
    kubelet: true
    kubeProxy: true
    kubePrometheusGeneral: true
    kubePrometheusNodeRecording: true
    kubernetesApps: true
    kubernetesResources: true
    kubernetesStorage: true
    kubernetesSystem: true
    network: true
    node: true
    nodeExporterAlerting: true
    nodeExporterRecording: true
    prometheus: true
    prometheusOperator: true